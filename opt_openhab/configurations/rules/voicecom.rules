import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

rule "Voice Control"
when
        Item VoiceCommand received command
then
        var String isaid = switch(receivedCommand.toString.lowerCase) {
        case "lights on" : executeCommandLine("sudo /home/pi/rcswitch-pi/send 2 2 3 1")
        case "lights off": executeCommandLine("sudo /home/pi/rcswitch-pi/send 2 2 3 0")
        case "light on"  : executeCommandLine("sudo /home/pi/rcswitch-pi/send 2 2 3 1")
        case "light off" : executeCommandLine("sudo /home/pi/rcswitch-pi/send 2 2 3 0")
	case "lights on" : pushover("Lights ON",1)
	case "lights off" : pushover("Lights OFF",1)
	case "camera on" : executeCommandLine("sudo service motion start")
	case "camera off": executeCommandLine("sudo service motion stop")
	case "coming home" : pushover("I'm coming HOME!!", 1)
	case "I'm coming home" : pushover("I'm coming HOME!",1)

}
//logDebug("rule", "Case: " + isaid)
//executeCommandLine("sudo /home/pi/rcswitch-pi/send 2 2 3 "+isaid)
//pushNotification("VIMSEN", "George, someone issued a Voice Command!")
//notifyMyAndroid("VIMSEN", "George, someone issued a Voice Command", 0)
end


rule "Lights Voice Control"
when
        Item VoiceCommand received command
then
        var String isaid = switch(receivedCommand.toString.lowerCase) {
        case "lights on" : pushover("Lights ON",1)
        case "lights off" : pushover("Lights OFF",1)
        case "light on" : pushover("Lights ON",1)
        case "light off" : pushover("Lights OFF",1)
}

end

