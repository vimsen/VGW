import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*

rule "Select Radio Station"
   when 
	Radio_Station received command
   then
	switch(receivedCommand) {
	case 0 : playStream(null)
	case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
	case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
	case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
	}
	logInfo("rule", "Selected Station = " + receivedCommand)
end

rule "Volume Control"
	when
		Item Volume received command
	then
		if(receivedCommand instanceof PercentType) {
			setMasterVolume(receivedCommand as PercentType)
	} else {
		if(receivedCommand==INCREASE) increaseMasterVolume(20)
		if(receivedCommand==DECREASE) decreaseMasterVolume(20)
	}
	postUpdate(Volume, masterVolume * 100)
end

rule "Notify on Low Temperature"
when
//	Time cron "0 * * * * ?"
	Item itm_uber1_temp_mqtt received update
//	Item Weather_Temperature received update
then
	var LRtemp = itm_uber1_temp_mqtt.state as DecimalType
	var minTemp = 13.0
//	logInfo("Info-Rules", "LR-Temperature is : " + itm_uber1_temp_mqtt.state)
	if (LRtemp < minTemp) {
//	logInfo("PushNotif", "Activated")
	pushNotification("VIMSEN", "LivingRoom Temp is below 13 oC")
        notifyMyAndroid("VIMSEN", "LivingRoom Temp is below 13 oC", 1)
	}
end


rule "StartUp"
	when
		System started
	then
//		say("System Started")
//        	notifyMyAndroid("VIMSEN", "OPENHAB System Started NOW!", 2)
        	pushNotification("VIMSEN", "OPENHAB System Started")
		pushover("VGW#1 STARTED",0)
//	sendMail("1907bbce12200a95e2c43f695f022917a10bb23d@api.prowlapp.com", "OPENHAB started (mail)", "NOW")
//	sendMail("glimperop@gmail.com", "OPENHAB started", "NOW")
end

// Creates an item that stores the last update time of this item
rule "Records last weather update time"
when
  Item Weather_Temperature received update
then
  postUpdate(Weather_LastUpdate, new DateTimeType())
end
